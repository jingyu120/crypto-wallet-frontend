{"version":3,"sources":["redux/messageSlice.js","components/chat/Chat.js","components/chat/JoinChat.js","components/chat/ChatComponent.js","authentication/Firebase.js","services/authContext.js","redux/cryptoSlice.js","components/transaction/BuyButton.js","components/transaction/BuyAmount.js","components/crypto/CryptoComponent.js","components/home/Home.js","components/transaction/SellButton.js","components/portfolio/Modal.js","components/portfolio/PortfolioTable.js","components/portfolio/Portfolio.js","authentication/Login.js","authentication/Registration.js","components/balance/Balance.js","App.js","redux/store.js","serviceWorker.js","index.js"],"names":["messageSlice","createSlice","name","initialState","reducers","appendMessage","state","action","newMessage","id","Date","now","toString","room","payload","author","message","time","getHours","getMinutes","push","actions","Chat","socket","username","useState","currentMessage","setCurrentMessage","messages","useSelector","dispatch","useDispatch","sendMessage","a","messageData","emit","useEffect","on","data","className","map","messageContent","type","value","placeholder","onChange","event","target","onKeyPress","key","onClick","JoinChat","setUsername","setRoom","joinRoom","io","connect","ChatComponent","showChat","setShowChat","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","provider","GoogleAuthProvider","AuthContext","React","createContext","AuthProvider","children","currentUser","setCurrentUser","pending","setPending","onAuthStateChanged","user","Provider","getCryptoList","createAsyncThunk","getState","axios","get","then","res","cryptoSlice","balance","cryptoList","setBalance","setCryptoList","extraReducers","fulfilled","BuyButton","coinProp","coinAmount","crypto","useContext","processing","setProcessing","coinId","filter","c","symbol","coinSelected","coinPrice","price_usd","amount","Number","cost","post","email","alert","error","console","log","BuyAmount","coinCost","coinName","totalCost","setTotalCost","quantity","setQuantity","modalOpen","transaction","coinTotal","setCoinProp","prev","CryptoComponent","length","coin","percent_change_24h","Home","SellButton","cryptoId","Modal","setOpenModal","PortfolioTable","wallet","setWallet","modal","setModal","params","response","toFixed","_id","Portfolio","navigate","useNavigate","Login","loginEmail","setLoginEmail","loginPassword","setLoginPassword","login","signInWithEmailAndPassword","signInWithPopup","result","displayName","status","to","Registration","setName","setEmail","password","setPassword","birthday","setBirthday","gender","setGender","submitForm","createUserWithEmailAndPassword","required","Balance","setAmount","setTransaction","postTransaction","trsx","App","signOut","path","element","persistConfig","version","storage","stateReconciler","autoMergeLevel2","persistedReducer","persistReducer","cryptoReducer","store","configureStore","reducer","messageReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","Boolean","window","location","hostname","match","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a55e4474.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const messageSlice = createSlice({\n  name: \"messages\",\n  initialState: [],\n  reducers: {\n    appendMessage: (state, action) => {\n      const newMessage = {\n        id: new Date(Date.now()).toString(),\n        room: action.payload.room,\n        author: action.payload.author,\n        message: action.payload.message,\n        time:\n          new Date(Date.now()).getHours() +\n          \":\" +\n          new Date(Date.now()).getMinutes(),\n      };\n      state.push(newMessage);\n    },\n  },\n});\n\nexport const { appendMessage } = messageSlice.actions;\nexport default messageSlice.reducer;\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport ScrollToBottom from \"react-scroll-to-bottom\";\nimport { appendMessage } from \"../../redux/messageSlice\";\nimport \"./Chat.css\";\n\nfunction Chat({ socket, username, room }) {\n  const [currentMessage, setCurrentMessage] = useState(\"\");\n  const messages = useSelector((state) => state.message);\n  const dispatch = useDispatch();\n\n  const sendMessage = async () => {\n    if (currentMessage !== \"\") {\n      const messageData = {\n        room: room,\n        author: username,\n        message: currentMessage,\n      };\n\n      await socket.emit(\"send_message\", messageData);\n\n      dispatch(appendMessage(messageData));\n      setCurrentMessage(\"\");\n    }\n  };\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      dispatch(appendMessage(data));\n    });\n  }, [socket, dispatch]);\n\n  return (\n    <div className=\"chat-window\">\n      <div className=\"chat-header\">\n        <p>Live Chat</p>\n      </div>\n      <div className=\"chat-body\">\n        <ScrollToBottom className=\"message-container\">\n          {messages.map((messageContent) => {\n            return (\n              <div\n                className=\"message\"\n                id={username === messageContent.author ? \"you\" : \"other\"}\n                key={messageContent.id}\n              >\n                <div>\n                  <div className=\"message-content\">\n                    <p>{messageContent.message}</p>\n                  </div>\n                  <div className=\"message-meta\">\n                    <p id=\"time\"> {messageContent.time} </p>\n                    <p id=\"author\"> {messageContent.author} </p>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </ScrollToBottom>\n      </div>\n      <div className=\"chat-footer\">\n        <input\n          type=\"text\"\n          value={currentMessage}\n          placeholder=\"Hey...\"\n          onChange={(event) => {\n            setCurrentMessage(event.target.value);\n          }}\n          onKeyPress={(event) => {\n            event.key === \"Enter\" && sendMessage();\n          }}\n        />\n        <button onClick={sendMessage}>&#9658;</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n","import React from \"react\";\nimport \"./JoinChat.css\";\n\nexport default function JoinChat({ setUsername, room, setRoom, joinRoom }) {\n  return (\n    <div className=\"joinChatContainer\">\n      <h3>Join A Chat</h3>\n      <input\n        type=\"text\"\n        placeholder=\"Enter your name\"\n        onChange={(event) => {\n          setUsername(event.target.value);\n        }}\n        onKeyPress={(event) => event.key === \"Enter\" && joinRoom()}\n      />\n      <select\n        value={room}\n        onChange={(event) => {\n          setRoom(event.target.value);\n        }}\n      >\n        <option value=\"general\">General</option>\n        <option value=\"room1\">Room 1</option>\n        <option value=\"room2\">Room 2</option>\n        <option value=\"room3\">Room 3</option>\n        <option value=\"room4\">Room 4</option>\n        <option value=\"room5\">Room 5</option>\n        <option value=\"room6\">Room 6</option>\n      </select>\n      <button onClick={joinRoom}>Join a Room</button>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Chat from \"./Chat\";\nimport JoinChat from \"./JoinChat\";\nimport \"./ChatComponent.css\";\n\nconst socket = io.connect(\"https://mern-crypto-wallet.herokuapp.com/\");\n\nexport default function ChatComponent() {\n  const [showChat, setShowChat] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"general\");\n\n  const joinRoom = () => {\n    if (username !== \"\" && room !== \"\") {\n      socket.emit(\"join_room\", room);\n      setShowChat(true);\n    }\n  };\n\n  return (\n    <div className=\"chat-container\">\n      {!showChat ? (\n        <JoinChat\n          room={room}\n          setUsername={setUsername}\n          setRoom={setRoom}\n          joinRoom={joinRoom}\n        />\n      ) : (\n        <Chat socket={socket} username={username} room={room} />\n      )}\n    </div>\n  );\n}\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\n// import { getAnalytics } from \"firebase/analytics\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyD1XDf8roZwl9Ul38GblBWogyvSdTqsRqM\",\n  authDomain: \"react-chat-f71bf.firebaseapp.com\",\n  projectId: \"react-chat-f71bf\",\n  storageBucket: \"react-chat-f71bf.appspot.com\",\n  messagingSenderId: \"455884864258\",\n  appId: \"1:455884864258:web:aaa1c98b1d7a3fb2b2201b\",\n  measurementId: \"G-J610CGFW0G\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n// const analytics = getAnalytics(app);\n\nexport const auth = getAuth(app);\nexport const isLoggedIn = () => {\n  return auth.currentUser;\n};\nexport const provider = new GoogleAuthProvider();\nexport const signInWithGoogle = () => {\n  signInWithPopup(auth, provider)\n    .then((result) => {\n      console.log(result);\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n","import React, { useEffect, useState } from \"react\";\nimport { auth } from \"../authentication/Firebase\";\n\nexport const AuthContext = React.createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [pending, setPending] = useState(true);\n\n  useEffect(() => {\n    auth.onAuthStateChanged((user) => {\n      setCurrentUser(user);\n      setPending(false);\n    });\n  }, []);\n\n  if (pending) {\n    return <>Loading...</>;\n  }\n\n  return (\n    <AuthContext.Provider\n      value={{\n        currentUser,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport axios from \"axios\";\nexport const getCryptoList = createAsyncThunk(\n  \"crypto/getCryptoList\",\n  async (dispatch, getState) => {\n    return axios\n      .get(\"https://api.coinlore.net/api/tickers/\")\n      .then((res) => res.data.data);\n  }\n);\n\nexport const cryptoSlice = createSlice({\n  name: \"messages\",\n  initialState: { balance: 0, cryptoList: [] },\n  reducers: {\n    setBalance: (state, action) => {\n      state.balance = action.payload;\n    },\n    setCryptoList: (state, action) => {\n      state.cryptoList = action.payload;\n    },\n  },\n  extraReducers: {\n    [getCryptoList.fulfilled]: (state, action) => {\n      state.cryptoList = action.payload;\n    },\n  },\n});\n\nexport const { setBalance, setCryptoList } = cryptoSlice.actions;\nexport default cryptoSlice.reducer;\n","import React, { useContext, useState } from \"react\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../../services/authContext\";\nimport \"./BuyButton.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setBalance } from \"../../redux/cryptoSlice\";\n\nfunction BuyButton({ coinProp, coinAmount }) {\n  const { balance, cryptoList } = useSelector((state) => state.crypto);\n  const dispatch = useDispatch();\n  const { currentUser } = useContext(AuthContext);\n  const [processing, setProcessing] = useState(false);\n\n  const coinId = cryptoList.filter((c) => c.symbol === coinProp.coinSelected)[0]\n    .id;\n  let coinPrice = null;\n  const buyCoin = () => {\n    try {\n      setProcessing(true);\n      axios\n        .get(`https://api.coinlore.net/api/ticker/?id=${coinId}`)\n        .then((res) => {\n          coinPrice = res.data[0].price_usd;\n        })\n        .then(() => {\n          const data = {\n            name: coinProp.coinSelected,\n            amount: Number(coinAmount),\n            cost: Number(coinAmount * coinPrice),\n          };\n          if (balance >= data.cost) {\n            axios\n              .post(\n                `https://mern-crypto-wallet.herokuapp.com/api/user/${currentUser.email}/addCoin`,\n                data\n              )\n              .then((res) => {\n                dispatch(setBalance(res.data));\n              });\n          } else {\n            alert(\"not enough balance\");\n          }\n\n          setProcessing(false);\n        });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  if (!processing) {\n    return (\n      <button className=\"buy-button\" onClick={buyCoin}>\n        Buy\n      </button>\n    );\n  } else {\n    return <>Processing</>;\n  }\n}\n\nexport default BuyButton;\n","import React, { useEffect, useState } from \"react\";\nimport BuyButton from \"./BuyButton\";\n\nexport default function BuyAmount({ coinCost, coinName }) {\n  const [totalCost, setTotalCost] = useState(0);\n  const [quantity, setQuantity] = useState(0);\n  const [coinProp, setCoinProp] = useState({\n    coinSelected: coinName,\n    modalOpen: false,\n    transaction: \"Buy\",\n    coinTotal: null,\n  });\n\n  useEffect(() => {\n    setTotalCost(quantity * coinCost);\n    setCoinProp((prev) => ({\n      ...prev,\n      coinTotal: quantity,\n    }));\n  }, [coinCost, quantity]);\n\n  return (\n    <>\n      <td>\n        <div className=\"amount-container\">\n          <input\n            placeholder=\"amount\"\n            onChange={(event) => {\n              setQuantity(event.target.value);\n            }}\n          />\n          <BuyButton coinProp={coinProp} coinAmount={quantity} />\n        </div>\n      </td>\n      <td>${totalCost}</td>\n    </>\n  );\n}\n","import React, { useContext, useEffect } from \"react\";\nimport \"./CyrptoComponent.css\";\nimport BuyAmount from \"../transaction/BuyAmount\";\nimport { AuthContext } from \"../../services/authContext\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getCryptoList } from \"../../redux/cryptoSlice\";\n\nexport default function CryptoComponent() {\n  const { currentUser } = useContext(AuthContext);\n  const { cryptoList } = useSelector((state) => state.crypto);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getCryptoList());\n  }, [dispatch]);\n\n  return (\n    <div className=\"crypto-table\">\n      <table>\n        <thead>\n          <tr>\n            <th>Symbol</th>\n            <th>Name</th>\n            <th>Price USD</th>\n            <th>% Change</th>\n            {currentUser && (\n              <>\n                <th>Buy</th>\n                <th>Cost</th>\n              </>\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {cryptoList.length > 0 &&\n            cryptoList.map((coin) => {\n              return (\n                <tr key={coin.id}>\n                  <td>{coin.symbol}</td>\n                  <td>{coin.name}</td>\n                  <td>${coin.price_usd}</td>\n                  <td>{coin.percent_change_24h}</td>\n                  {currentUser && (\n                    <>\n                      <BuyAmount\n                        coinCost={coin.price_usd}\n                        coinName={coin.symbol}\n                      />\n                    </>\n                  )}\n                </tr>\n              );\n            })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport ChatComponent from \"../chat/ChatComponent\";\nimport CryptoComponent from \"../crypto/CryptoComponent\";\nimport \"./Home.css\";\n\nexport default function Home() {\n  const [showChat, setShowChat] = useState(false);\n  return (\n    <div>\n      <CryptoComponent />\n      <button className=\"chat-toggle\" onClick={() => setShowChat(!showChat)}>\n        {showChat ? \"Close\" : \"Show\"} Chat\n      </button>\n      {showChat && <ChatComponent />}\n    </div>\n  );\n}\n","import React, { useContext, useState } from \"react\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../../services/authContext\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setBalance } from \"../../redux/cryptoSlice\";\n\nfunction SellButton({ coinProp, coinAmount }) {\n  const { currentUser } = useContext(AuthContext);\n  const { cryptoList } = useSelector((state) => state.crypto);\n  const dispatch = useDispatch();\n  const [processing, setProcessing] = useState(false);\n  const cryptoId = cryptoList.filter(\n    (c) => c.symbol === coinProp.coinSelected\n  )[0].id;\n\n  let coinPrice = null;\n  const sellCoin = () => {\n    if (coinAmount > coinProp.coinTotal) {\n      alert(\"Not enough coins in wallet.\");\n    } else {\n      try {\n        setProcessing(true);\n        axios\n          .get(`https://api.coinlore.net/api/ticker/?id=${cryptoId}`)\n          .then((res) => {\n            coinPrice = res.data[0].price_usd;\n          })\n          .then(() => {\n            const data = {\n              name: coinProp.coinSelected,\n              amount: Number(coinAmount),\n              cost: Number(coinAmount * coinPrice),\n            };\n            axios\n              .post(\n                `https://mern-crypto-wallet.herokuapp.com/api/user/${currentUser.email}/sellCoin`,\n                data\n              )\n              .then((res) => dispatch(setBalance(res.data)));\n            setProcessing(false);\n          });\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n  };\n\n  if (!processing) {\n    return <button onClick={sellCoin}>Sell</button>;\n  } else {\n    return <>Processing</>;\n  }\n}\n\nexport default SellButton;\n","import React, { useState } from \"react\";\nimport BuyButton from \"../transaction/BuyButton\";\nimport SellButton from \"../transaction/SellButton\";\nimport \"./Modal.css\";\n\nfunction Modal({ setOpenModal, coinProp }) {\n  const [quantity, setQuantity] = useState(0);\n\n  return (\n    <div className=\"modalBackground\">\n      <div className=\"modalContainer\">\n        <div className=\"titleCloseBtn\">\n          <button\n            onClick={() => {\n              setOpenModal((prev) => ({\n                ...prev,\n                modalOpen: false,\n              }));\n            }}\n          >\n            X\n          </button>\n        </div>\n        <div className=\"title\">\n          <h1>{coinProp.transaction + \" \" + coinProp.coinSelected}</h1>\n          <h2>Coin Amount: {coinProp.coinTotal}</h2>\n        </div>\n        <div className=\"body\">\n          <input\n            className=\"transaction-input\"\n            placeholder=\"Amount\"\n            onChange={(event) => {\n              setQuantity(event.target.value);\n            }}\n          ></input>\n        </div>\n        <div className=\"footer\">\n          <button\n            onClick={() => {\n              setOpenModal(false);\n            }}\n            id=\"cancelBtn\"\n          >\n            Cancel\n          </button>\n          {coinProp.transaction === \"Buy\" ? (\n            <BuyButton coinProp={coinProp} coinAmount={quantity} />\n          ) : null}\n          {coinProp.transaction === \"Sell\" ? (\n            <SellButton coinProp={coinProp} coinAmount={quantity} />\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { AuthContext } from \"../../services/authContext\";\nimport Modal from \"./Modal\";\nimport \"./PortfolioTable.css\";\n\nfunction PortfolioTable() {\n  const [wallet, setWallet] = useState();\n  const [modal, setModal] = useState({\n    coinSelected: null,\n    modalOpen: false,\n    transaction: null,\n    coinTotal: null,\n  });\n\n  const { currentUser } = useContext(AuthContext);\n\n  useEffect(() => {\n    axios\n      .get(\"https://mern-crypto-wallet.herokuapp.com/api/user/getCoins\", {\n        params: {\n          email: currentUser.email,\n        },\n      })\n      .then((response) => {\n        setWallet(response.data);\n      });\n\n    // eslint-disable-next-line\n  }, [modal.modalOpen]);\n  return (\n    <div className=\"portfolio-table\">\n      <table>\n        <thead>\n          <tr>\n            <td>Symbol</td>\n            <td>Amount</td>\n            <td>Cost</td>\n            <td>Buy/Sell</td>\n            {/* <td>Total</td> */}\n          </tr>\n        </thead>\n        <tbody>\n          {wallet &&\n            wallet.map((coin) => {\n              return (\n                <tr key={coin._id}>\n                  <td>{coin.name}</td>\n                  <td>{coin.amount}</td>\n                  <td>{coin.cost.toFixed(2)}</td>\n                  <td>\n                    {modal.modalOpen && (\n                      <Modal setOpenModal={setModal} coinProp={modal} />\n                    )}\n                    <button\n                      className=\"openModalBtn buy\"\n                      onClick={() =>\n                        setModal((prev) => ({\n                          ...prev,\n                          modalOpen: true,\n                          coinSelected: coin.name,\n                          transaction: \"Buy\",\n                          coinTotal: coin.amount,\n                        }))\n                      }\n                    >\n                      Buy\n                    </button>\n                    <button\n                      className=\"openModalBtn sell\"\n                      onClick={() =>\n                        setModal((prev) => ({\n                          ...prev,\n                          modalOpen: true,\n                          coinSelected: coin.name,\n                          transaction: \"Sell\",\n                          coinTotal: coin.amount,\n                        }))\n                      }\n                    >\n                      Sell\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default PortfolioTable;\n","// import axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport PortfolioTable from \"./PortfolioTable\";\n\nexport default function Portfolio({ currentUser }) {\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!currentUser) {\n      navigate(\"/login\");\n    } else {\n      // axios.get(\n      //   `https://mern-crypto-wallet.herokuapp.com/api/user/${currentUser.email}/networth`\n      // );\n    }\n    // eslint-disable-next-line\n  }, [currentUser]);\n  return (\n    <div>\n      <h1> Portfolio Networth: </h1>\n      <PortfolioTable />\n    </div>\n  );\n}\n","import { signInWithEmailAndPassword, signInWithPopup } from \"firebase/auth\";\nimport React, { useState } from \"react\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { auth, provider } from \"./Firebase\";\nimport \"./Login.css\";\nimport axios from \"axios\";\n\nexport default function Login() {\n  const [loginEmail, setLoginEmail] = useState(\"\");\n  const [loginPassword, setLoginPassword] = useState(\"\");\n  const navigate = useNavigate();\n\n  const login = async () => {\n    try {\n      const user = await signInWithEmailAndPassword(\n        auth,\n        loginEmail,\n        loginPassword\n      );\n      console.log(user);\n      navigate(\"/\");\n    } catch (error) {\n      alert(error);\n    }\n  };\n  const signInWithGoogle = () => {\n    signInWithPopup(auth, provider).then((result) => {\n      const data = {\n        name: result.user.displayName,\n        email: result.user.email,\n      };\n      axios\n        .post(\"https://mern-crypto-wallet.herokuapp.com/api/user/google_sign_in\", data)\n        .then((res) => {\n          if (res.status === 200) {\n            navigate(\"/\");\n          } else {\n            alert(\"Server error, please try again later\");\n          }\n        });\n    });\n  };\n\n  return (\n    <div className=\"loginPage\">\n      <div className=\"input-fields\">\n        <input\n          placeholder=\"email\"\n          onChange={(event) => setLoginEmail(event.target.value)}\n        ></input>\n        <input\n          placeholder=\"password\"\n          onChange={(event) => setLoginPassword(event.target.value)}\n        ></input>\n      </div>\n      <div>\n        <button className=\"sign-in\" onClick={login}>\n          Login\n        </button>\n        <button className=\"google-sign-in\" onClick={signInWithGoogle}>\n          Sign in with Google\n        </button>\n      </div>\n      <div>\n        <span className=\"register\">\n          Not registered? <Link to={\"/registration\"}>Create an account</Link>\n        </span>\n      </div>\n      {/* <button\n        className=\"register\"\n        onClick={() => {\n          navigate(\"/registration\");\n        }}\n      >\n        Registration\n      </button> */}\n    </div>\n  );\n}\n","import { createUserWithEmailAndPassword } from \"firebase/auth\";\nimport React, { useState } from \"react\";\nimport { auth } from \"./Firebase\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./Registration.css\";\n\nexport default function Registration() {\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [birthday, setBirthday] = useState();\n  const [gender, setGender] = useState(\"Male\");\n  const navigate = useNavigate();\n\n  const submitForm = async () => {\n    try {\n      console.log(email, password);\n      await createUserWithEmailAndPassword(auth, email, password);\n      const data = { name, email, birthday, gender };\n      axios\n        .post(\"https://mern-crypto-wallet.herokuapp.com/api/user/createUser\", data)\n        .then((res) => {\n          if (res.status === 200) {\n            navigate(\"/\");\n          } else {\n            alert(\"Server error when creating user.\");\n          }\n        });\n    } catch (error) {\n      alert(error);\n    }\n  };\n\n  return (\n    <div className=\"form\">\n      <h1>Registration</h1>\n      <div>\n        <span className=\"details\">Full Name</span>\n        <input\n          type=\"text\"\n          placeholder=\"Enter name\"\n          onChange={(event) => {\n            setName(event.target.value);\n          }}\n          required\n        />\n      </div>\n      <div>\n        <span className=\"details\">Email</span>\n        <input\n          type=\"email\"\n          placeholder=\"Enter email\"\n          onChange={(event) => {\n            setEmail(event.target.value);\n          }}\n          required\n        />\n      </div>\n      <div>\n        <span className=\"details\">Password</span>\n        <input\n          type=\"password\"\n          placeholder=\"Enter password\"\n          onChange={(event) => {\n            setPassword(event.target.value);\n          }}\n          required\n        />\n      </div>\n      <div>\n        <span className=\"details\">Birthday</span>\n        <input\n          type=\"date\"\n          placeholder=\"Enter birthday\"\n          onChange={(event) => {\n            setBirthday(event.target.value);\n          }}\n          required\n        />\n      </div>\n      <div>\n        <span className=\"details\">Gender</span>\n        <select\n          value={gender}\n          onChange={(event) => {\n            setGender(event.target.value);\n          }}\n        >\n          <option value=\"Male\">Male</option>\n          <option value=\"Female\">Female</option>\n        </select>\n      </div>\n      <div>\n        <button className=\"registration-submit\" onClick={submitForm}>\n          Submit\n        </button>\n      </div>\n    </div>\n  );\n}\n","import axios from \"axios\";\nimport React, { useContext, useState } from \"react\";\nimport { AuthContext } from \"../../services/authContext\";\nimport \"./Balance.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setBalance } from \"../../redux/cryptoSlice\";\n\nfunction Balance() {\n  const [amount, setAmount] = useState(null);\n  const [transaction, setTransaction] = useState(\"+\");\n  const { balance } = useSelector((state) => state.crypto);\n  const dispatch = useDispatch();\n  const { currentUser } = useContext(AuthContext);\n\n  const postTransaction = (trsx) => {\n    if (trsx === \"+\") {\n      axios\n        .post(\n          `https://mern-crypto-wallet.herokuapp.com/api/user/${currentUser.email}/depositCash/${amount}`\n        )\n        .then((res) => {\n          if (res.status === 200) {\n            dispatch(setBalance(res.data));\n            alert(\"Deposit Successful\");\n          } else {\n            alert(\"Deposit Unsuccessful\");\n          }\n        });\n    } else if (trsx === \"-\") {\n      axios\n        .post(\n          `https://mern-crypto-wallet.herokuapp.com/api/user/${currentUser.email}/withdrawCash/${amount}`\n        )\n        .then((res) => {\n          if (res.status === 200) {\n            dispatch(setBalance(res.data));\n            alert(\"Withdraw Successful\");\n          } else {\n            alert(\"Withdraw Unsuccessful\");\n          }\n        });\n    } else {\n      alert(\"invalid transaction method.\");\n    }\n  };\n  const submitTransaction = () => {\n    if (transaction === \"+\") {\n      postTransaction(\"+\");\n    } else if (transaction === \"-\") {\n      if (Number(amount) > balance) {\n        alert(\"Not enough for a withdraw.\");\n      } else {\n        postTransaction(\"-\");\n      }\n    } else {\n      alert(\"transaction is not + or -\");\n    }\n  };\n  return (\n    <div className=\"balance_input\">\n      <label>Amount</label>\n      <input\n        placeholder=\"Amount in USD\"\n        type=\"number\"\n        onChange={(event) => setAmount(event.target.value)}\n      ></input>\n      <select\n        value={transaction}\n        onChange={(event) => setTransaction(event.target.value)}\n      >\n        <option value=\"+\">Deposit</option>\n        <option value=\"-\">Withdraw</option>\n      </select>\n      <button onClick={submitTransaction}>Submit</button>\n    </div>\n  );\n}\n\nexport default Balance;\n","import \"./App.css\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\nimport React, { useContext, useEffect } from \"react\";\nimport Home from \"./components/home/Home\";\nimport Portfolio from \"./components/portfolio/Portfolio\";\nimport Login from \"./authentication/Login\";\nimport { auth } from \"./authentication/Firebase\";\nimport Registration from \"./authentication/Registration\";\nimport { AuthContext } from \"./services/authContext\";\nimport Balance from \"./components/balance/Balance\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\nimport { setBalance } from \"./redux/cryptoSlice\";\n\nfunction App() {\n  const { currentUser } = useContext(AuthContext);\n  const { balance } = useSelector((state) => state.crypto);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    currentUser &&\n      axios\n        .get(\n          `https://mern-crypto-wallet.herokuapp.com/api/user/${currentUser.email}/balance`\n        )\n        .then((res) => dispatch(setBalance(res.data)));\n  }, [currentUser, dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <nav>\n          <></>\n          <div className=\"center-nv\">\n            <Link to=\"/\">Home</Link>\n            {currentUser && <Link to=\"/portfolio\">Portfolio</Link>}\n            {currentUser ? (\n              <button className=\"logout-btn\" onClick={() => auth.signOut()}>\n                Log Out {currentUser.email}\n              </button>\n            ) : (\n              <Link to=\"/login\">Login</Link>\n            )}\n          </div>\n          <div className=\"right-nav\">\n            {currentUser && (\n              <Link to=\"/balance\">\n                Current Balance: ${Number(balance).toFixed(2)}{\" \"}\n              </Link>\n            )}\n          </div>\n        </nav>\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/registration\" element={<Registration />} />\n          <Route\n            path=\"/portfolio\"\n            element={<Portfolio currentUser={currentUser} />}\n          />\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"/balance\" element={<Balance />} />\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport {\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport autoMergeLevel2 from \"redux-persist/lib/stateReconciler/autoMergeLevel2\";\nimport messageReducer from \"./messageSlice\";\nimport cryptoReducer from \"./cryptoSlice\";\n\nconst persistConfig = {\n  key: \"root\",\n  version: 1,\n  storage,\n  stateReconciler: autoMergeLevel2,\n};\n\nconst persistedReducer = persistReducer(persistConfig, cryptoReducer);\n\nexport const store = configureStore({\n  reducer: { message: messageReducer, crypto: persistedReducer },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./redux/store\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { AuthProvider } from \"./services/authContext\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { persistStore } from \"redux-persist\";\n\nlet persistor = persistStore(store);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <AuthProvider>\n          <App />\n        </AuthProvider>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}